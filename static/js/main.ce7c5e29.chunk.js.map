{"version":3,"sources":["components/UserSetting.js","components/InputSection.js","components/OutputSection.js","App.js","index.js"],"names":["UserSetting","passUserSettings","useState","forDiscord","snowstorm","autoCopy","settings","setSettings","useEffect","console","log","handleChange","event","target","name","checked","UserSettingWrap","className","FormGroup","Tooltip","title","placement","FormControlLabel","control","Switch","onChange","color","label","labelPlacement","styled","div","passStates","text","reps","passText","passReps","setOpen","parseInt","warn","Number","isNaN","InputSection","classes","useStyles","setText","setReps","open","InputSectionWrap","TextField","id","textfield","inputProps","input","e","value","onKeyPress","key","Button","variant","button","onClick","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","elevation","severity","handleKeys","onKeyEvent","makeStyles","root","padding","borderBottom","borderBottomColor","marginTop","marginBottom","OutputSection","setSeverity","result","makeResult","openCopyNoti","length","navigator","clipboard","writeText","OutputSectionWrap","closeCopyNoti","ResultWrap","Result","NumLengthLimit","str","i","slice","len","Alert","props","p","App","AppWrap","HeaderWrap","Title","ContentWrap","FooterWrap","excludeMobile","h1","ReactDOM","render","StrictMode","href","document","getElementById"],"mappings":"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","file":"static/js/main.ce7c5e29.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport styled from \"styled-components\";\n\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nexport default function UserSetting({passUserSettings}) {\n\n    const [settings, setSettings] = useState({\n        forDiscord: true,\n        snowstorm : true,\n        autoCopy : true,\n    });\n\n    useEffect( () => {\n        console.log(settings);\n        passUserSettings(settings);\n    });\n\n    const handleChange = (event) => {\n        setSettings({ ...settings, [event.target.name]: event.target.checked });\n    }\n\n    return (\n        <UserSettingWrap className=\"UserSetting\">\n            <FormGroup>\n                <Tooltip title=\"Generate Output up to 2000 characters\" placement=\"left\">\n                    <FormControlLabel\n                        control={ <Switch checked={settings.forDiscord} onChange={handleChange} name=\"forDiscord\" color=\"primary\" /> }\n                        label=\"For Discord\" labelPlacement=\"start\" \n                    />\n                </Tooltip>\n\n                <Tooltip title=\"Stoooooooorrrrrrrrm\" placement=\"left\">\n                    <FormControlLabel\n                        control={ <Switch checked={settings.snowstorm} onChange={handleChange} name=\"snowstorm\" color=\"primary\" /> }\n                        label=\"Snow Storm\" labelPlacement=\"start\"\n                    />\n                </Tooltip>\n\n                <Tooltip title=\"Copy automatically without click [Do Copy]\" placement=\"left\">\n                    <FormControlLabel\n                        control={ <Switch checked={settings.autoCopy} onChange={handleChange} name=\"autoCopy\" color=\"primary\" /> }\n                        label=\"Auto Copy\" labelPlacement=\"start\"\n                    />\n                </Tooltip>\n            </FormGroup>\n        </UserSettingWrap>\n    );\n}\n\nconst UserSettingWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n\n    border-radius : 5px;\n    color : white;\n\n    @media(max-width : 768px){\n        width : 90%;\n        max-width : 90%;\n    }\n`;","import React, { useState } from 'react';\nimport styled from \"styled-components\";\n\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst passStates = (text, reps, passText, passReps, setOpen) => {\n    reps = parseInt(reps)\n    console.log(`text : ${text} ${typeof reps}/ reps : ${reps} ${typeof reps}`);\n    \n    // < validate inputs >\n        // 01. Empty input\n    if( text==='' || reps==='' ){\n        console.warn('[Validate Issue] Empty input : InputSection.js');\n        setOpen(true);\n        return;\n    }\n        // 02. Reps is NaN\n    if( Number.isNaN(reps) ){\n        console.warn('[Validate Issue] reps is NaN : InputSection.js');\n        setOpen(true);\n        return;\n    }\n\n    // < set State of Parent component >\n    passText(text); \n    passReps(reps);\n}\n\nexport default function InputSection({ passText, passReps }) {\n    const classes = useStyles();\n    const [text, setText] = useState('');\n    const [reps, setReps] = useState('');\n    const [open, setOpen] = useState(false);\n\n    return (\n        <InputSectionWrap>\n            <TextField \n                id=\"text-input\" className={classes.textfield} inputProps={{className: classes.input}} label=\"Text\" \n                onChange={ (e) => { setText(e.target.value) } } \n                onKeyPress={ (e) => { if(e.key=='Enter'){passStates(text, reps, passText, passReps, setOpen)} } }\n            />\n            <TextField \n                id=\"reps-input\" className={classes.textfield} inputProps={{className: classes.input}} label=\"Reps\" \n                onChange={ (e) => { setReps(e.target.value) } } \n                onKeyPress={ (e) => { if(e.key=='Enter'){passStates(text, reps, passText, passReps, setOpen)} } }\n            />\n            <Button \n                variant=\"contained\" \n                className={classes.button} \n                onClick={ (e) => { passStates(text, reps, passText, passReps, setOpen) } }\n            >\n                DO REPEAT\n            </Button>\n\n            <Snackbar open={open} autoHideDuration={3000} anchorOrigin={{vertical:'bottom', horizontal:'left'}} onClose={ () => {setOpen(false)} }>\n                <MuiAlert elevation={6} variant=\"filled\" severity={'error'} onClose={ () => {setOpen(false)} }>\n                    Please check your Input\n                </MuiAlert>\n            </Snackbar>\n\n            <KeyboardEventHandler\n                handleKeys={['enter']}\n                onKeyEvent={ (key, e) => { passStates(text, reps, passText, passReps, setOpen) } } \n            />\n        </InputSectionWrap>\n    );\n}\n\nconst InputSectionWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    \n    padding : 1rem;\n    margin : 1rem;\n    \n    background-color : rgba(255,255,255,0.1);\n    border-radius : 5px;\n\n    @media(max-width : 768px){\n        width : 95%;\n        max-width : 95%;\n    }\n`;\n\nconst useStyles = makeStyles({\n    root : {\n        \n    },\n    textfield : {\n        padding : '0.5rem',\n        color : 'white',\n        '& label' : {\n            color : 'white',\n        },\n        '& label.Mui-focused': {\n            color: 'white',\n        },\n        \"& .MuiInput-underline:before\": {\n            borderBottom: \"none\"\n        },\n        \"& .MuiInput-underline:hover::before\": {\n            borderBottomColor: \"white\"\n        },\n        \"& .MuiInput-underline:after\": {\n            borderBottomColor: \"white\"\n          }\n    },\n    input : {\n        color : 'white',\n    },\n\n    button : {\n        marginTop : '0.5rem',\n        marginBottom : '0.5rem',\n    }\n});","// https://clipboardjs.com/\n\nimport React, { useState, useEffect } from 'react';\n\nimport styled from \"styled-components\";\n\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nexport default function OutputSection({ text, reps, forDiscord, autoCopy }) {\n    const [open, setOpen] = useState(false); \n    const [severity, setSeverity] = useState(''); // 'info' , 'warning'\n    \n    const NumLengthLimit = 2000;\n    const result = makeResult(text, reps, forDiscord, NumLengthLimit);\n\n    const classes = useStyles();\n\n    useEffect( () => {\n        if (autoCopy) {\n            openCopyNoti(result.length, setOpen, setSeverity);\n            navigator.clipboard.writeText(result);\n        }\n    }, [autoCopy,result.length]);\n\n    return (\n        <OutputSectionWrap>\n            <CopyToClipboard text={result}>\n                <Button variant=\"contained\" className={classes.button} \n                        onClick={ () => {openCopyNoti(result.length, setOpen, setSeverity)} }\n                >\n                    COPY IT\n                </Button>\n            </CopyToClipboard>\n\n            <Snackbar open={open} autoHideDuration={3000} anchorOrigin={{vertical:'bottom', horizontal:'left'}} onClose={ () => {closeCopyNoti(setOpen)} }>\n                <Alert severity={severity} onClose={ () => {closeCopyNoti(setOpen)} }>\n                {\n                    severity === 'info'\n                    ? 'Copied!' \n                    : 'There is no content'\n                }\n                </Alert>\n            </Snackbar>\n\n            <ResultWrap>\n                <Result>{result}</Result>\n            </ResultWrap>            \n            \n        </OutputSectionWrap>\n    );\n}\n\nconst makeResult = (text, reps, forDiscord, NumLengthLimit) => {\n    let str = ''\n\n    for(let i=0; i<reps; i++){\n        str += text;\n        \n        if(forDiscord && (str.length > NumLengthLimit)){\n            str = str.slice(0,2000);\n            break;\n        }    \n    }\n\n    \n    return str;\n} \n\nconst openCopyNoti = (len, setOpen, setSeverity) => {\n\n    //validation\n    if(len>0){\n        console.log('copied');\n        setSeverity('info')\n    }\n    else {\n        console.warn('[Validate Issue] The result is Empty String : OutputSection.js');\n        setSeverity('warning')\n    }\n\n    setOpen(true);\n}\n\nconst closeCopyNoti = (setOpen) => {\n    setOpen(false);\n}\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nconst useStyles = makeStyles({\n    button : {\n        marginTop : '0.5rem',\n        marginBottom : '0.5rem',\n    }\n});\n\nconst OutputSectionWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n\n    padding : 1rem;\n    margin : 1rem;\n\n    background-color : rgba(255,255,255,0.1);\n    border-radius : 5px;\n\n    @media(max-width : 768px){\n        max-width : 95%;\n        width : 95%;\n    }\n`;\n\nconst ResultWrap = styled.div`\n    display : inherit;\n    justify-content : center;\n\n    background-color : white;\n    border-radius : 5px;\n\n    margin-top : 0.5rem;\n    margin-bottom : 0.5rem;\n\n    padding-left : 0.5rem;\n    padding-right : 0.5rem;\n`;\n\nconst Result = styled.p`\n    color : black;\n    \n    word-break: break-all;\n    overflow-wrap: break-word; \n`;","import React, { useState } from \"react\";\n\nimport styled from \"styled-components\";\nimport SnowStorm from \"react-snowstorm\";\n\nimport UserSetting from \"./components/UserSetting\";\nimport InputSection from \"./components/InputSection\";\nimport OutputSection from \"./components/OutputSection\";\n\nexport default function App() {\n    const [text, setText] = useState('');\n    const [reps, setReps] = useState(0);\n    const [settings, setSettings] = useState({\n        forDiscord: true,\n        snowstorm : true,\n        autoCopy : true,\n    });\n\n    return (\n        <AppWrap className=\"App\">\n            <HeaderWrap>\n                <Title>RepeJin</Title>\n            </HeaderWrap>\n\n            <UserSetting passUserSettings={setSettings} />\n\n            <ContentWrap>\n                <InputSection passText={setText} passReps={setReps} />\n                <OutputSection text={text} reps={reps} forDiscord={settings.forDiscord} autoCopy={settings.autoCopy} />\n            </ContentWrap>\n\n            <FooterWrap>\n                Wonjin Yi\n            </FooterWrap>\n            \n            {\n                settings.snowstorm\n                ? <SnowStorm excludeMobile={false} />\n                : ''\n            }\n            \n        </AppWrap>\n    );\n}\n\nconst AppWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n\n    color : white;\n    \n`;\n\nconst HeaderWrap = styled.div`\n    display : inherit;\n`;\n\nconst ContentWrap = styled.div`\n    display : inherit;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n    \n    @media(max-width : 768px){\n        max-width : 90%;\n        width : 90%;\n    }\n`;\n\nconst FooterWrap = styled.div`\n`;\n\nconst Title = styled.h1`\n    font-size : 50px;\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <a href=\"https://lab.wonj.in/\" className=\"wonjinlab-link\">Go to wonjinLab</a>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}