{"version":3,"sources":["components/InputSection.js","components/OutputSection.js","App.js","index.js"],"names":["InputSection","passText","passReps","classes","useStyles","useState","text","setText","reps","setReps","InputSectionWrap","TextField","id","className","textfield","inputProps","input","label","onChange","e","target","value","Button","variant","button","onClick","parseInt","console","log","Number","isNaN","warn","passStates","styled","div","makeStyles","root","padding","color","borderBottom","borderBottomColor","marginTop","marginBottom","OutputSection","result","makeResult","OutputSectionWrap","copyNoti","length","ResultWrap","Result","str","i","len","p","App","AppWrap","HeaderWrap","Title","ContentWrap","FooterWrap","h1","ReactDOM","render","StrictMode","href","document","getElementById"],"mappings":"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","file":"static/js/main.0f6d0d1a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from \"styled-components\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst passStates = (text, reps, passText, passReps) => {\n    reps = parseInt(reps)\n    console.log(`text : ${text} ${typeof reps}/ reps : ${reps} ${typeof reps}`);\n    \n    // < validate inputs >\n        // 01. Empty input\n    if( text==='' || reps==='' ){\n        console.warn('[Validate Issue] Empty input : InputSection.js');\n        return;\n    }\n        // 02. Reps is NaN\n    if( Number.isNaN(reps) ){\n        console.warn('[Validate Issue] reps is NaN : InputSection.js');\n        return;\n    }\n\n    // < set State of Parent component >\n    passText(text); \n    passReps(reps);\n}\n\nexport default function InputSection({ passText, passReps }) {\n    const classes = useStyles();\n    const [text, setText] = useState('');\n    const [reps, setReps] = useState('');\n\n    return (\n        <InputSectionWrap>\n            <TextField id=\"text-input\" className={classes.textfield} inputProps={{className: classes.input}} label=\"Text\" onChange={ (e) => { setText(e.target.value) } } />\n            <TextField id=\"reps-input\" className={classes.textfield} inputProps={{className: classes.input}} label=\"Reps\" onChange={ (e) => { setReps(e.target.value) } } />\n            <Button \n                variant=\"contained\" \n                className={classes.button} \n                onClick={ () => { passStates(text, reps, passText, passReps) } }\n            >\n                DO REPEAT\n            </Button>\n        </InputSectionWrap>\n    );\n}\n\nconst InputSectionWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    \n    padding : 1rem;\n    margin : 1rem;\n    border : 1px solid white;\n`;\n\nconst useStyles = makeStyles({\n    root : {\n        \n    },\n    textfield : {\n        padding : '0.5rem',\n        color : 'white',\n        '& label' : {\n            color : 'white',\n        },\n        '& label.Mui-focused': {\n            color: 'white',\n        },\n        \"& .MuiInput-underline:before\": {\n            borderBottom: \"none\"\n        },\n        \"& .MuiInput-underline:hover::before\": {\n            borderBottomColor: \"white\"\n        },\n        \"& .MuiInput-underline:after\": {\n            borderBottomColor: \"white\"\n          }\n    },\n    input : {\n        color : 'white',\n    },\n\n    button : {\n        marginTop : '0.5rem',\n        marginBottom : '0.5rem',\n    }\n});","import styled from \"styled-components\";\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\n\n\nexport default function OutputSection({ text, reps }) {\n    const classes = useStyles();\n    const result = makeResult(text, reps);\n\n    return (\n        <OutputSectionWrap>\n            <CopyToClipboard text={result}>\n                <Button variant=\"contained\" className={classes.button} onClick={ () => { copyNoti(result.length) } }>COPY IT</Button>\n            </CopyToClipboard>\n\n            <ResultWrap>\n                <Result>{result}</Result>\n            </ResultWrap>            \n            \n        </OutputSectionWrap>\n    );\n}\n\nconst makeResult = (text, reps) => {\n    let str = ''\n    for(let i=0; i<reps; i++){\n        str += text;\n    }\n\n    return str;\n} \n\nconst copyNoti = (len) => {\n\n    //validation\n    if(len===0){\n        console.warn('[Validate Issue] The result is Empty String : OutputSection.js');\n        return;\n    }\n\n    console.log('copied');\n}\n\n\nconst useStyles = makeStyles({\n    button : {\n        marginTop : '0.5rem',\n        marginBottom : '0.5rem',\n    }\n});\n\nconst OutputSectionWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n\n    padding : 1rem;\n    margin : 1rem;\n\n    border : 1px solid white;\n`;\n\nconst ResultWrap = styled.div`\n    display : inherit;\n    justify-content : center;\n\n    background-color : white;\n    border-radius : 5px;\n\n    margin-top : 0.5rem;\n    margin-bottom : 0.5rem;\n\n    padding-left : 0.5rem;\n    padding-right : 0.5rem;\n`;\n\nconst Result = styled.p`\n    color : black;\n    \n    word-break: break-all;\n    overflow-wrap: break-word; \n`;","import React, { useState } from 'react';\n\nimport styled from \"styled-components\";\nimport InputSection from \"./components/InputSection\";\nimport OutputSection from \"./components/OutputSection\";\n\nexport default function App() {\n    const [text, setText] = useState('');\n    const [reps, setReps] = useState(0);\n\n    return (\n        <AppWrap className=\"App\">\n            <HeaderWrap>\n                <Title>RepeJin</Title>\n            </HeaderWrap>\n\n            <ContentWrap>\n                <InputSection passText={setText} passReps={setReps} />\n                <OutputSection text={text} reps={reps} />\n            </ContentWrap>\n\n            <FooterWrap>\n                Wonjin Yi\n            </FooterWrap>\n        </AppWrap>\n    );\n}\n\nconst AppWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n\n    color : white;\n`;\n\nconst HeaderWrap = styled.div`\n    display : inherit;\n`;\n\nconst ContentWrap = styled.div`\n    display : inherit;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n`;\n\nconst FooterWrap = styled.div`\n`;\n\nconst Title = styled.h1`\n    font-size : 50px;\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <a href=\"https://lab.wonj.in/\" className=\"wonjinlab-link\">Go to wonjinLab</a>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}