{"version":3,"sources":["components/InputSection.js","components/OutputSection.js","App.js","index.js"],"names":["InputSection","passText","passReps","classes","useStyles","useState","text","setText","reps","setReps","open","setOpen","InputSectionWrap","TextField","id","className","textfield","inputProps","input","label","onChange","e","target","value","Button","variant","button","onClick","parseInt","console","log","warn","Number","isNaN","passStates","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","elevation","severity","styled","div","makeStyles","root","padding","color","borderBottom","borderBottomColor","marginTop","marginBottom","OutputSection","setSeverity","result","makeResult","OutputSectionWrap","openCopyNoti","length","closeCopyNoti","ResultWrap","Result","str","i","len","Alert","props","p","App","AppWrap","HeaderWrap","Title","ContentWrap","FooterWrap","excludeMobile","h1","ReactDOM","render","StrictMode","href","document","getElementById"],"mappings":"mjBAgCe,SAASA,EAAT,GAA+C,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACvCC,EAAUC,IADyC,EAEjCC,mBAAS,IAFwB,mBAElDC,EAFkD,KAE5CC,EAF4C,OAGjCF,mBAAS,IAHwB,mBAGlDG,EAHkD,KAG5CC,EAH4C,OAIjCJ,oBAAS,GAJwB,mBAIlDK,EAJkD,KAI5CC,EAJ4C,KAMzD,OACI,eAACC,EAAD,WACI,cAACC,EAAA,EAAD,CAAWC,GAAG,aAAaC,UAAWZ,EAAQa,UAAWC,WAAY,CAACF,UAAWZ,EAAQe,OAAQC,MAAM,OAAOC,SAAW,SAACC,GAAQd,EAAQc,EAAEC,OAAOC,UACnJ,cAACV,EAAA,EAAD,CAAWC,GAAG,aAAaC,UAAWZ,EAAQa,UAAWC,WAAY,CAACF,UAAWZ,EAAQe,OAAQC,MAAM,OAAOC,SAAW,SAACC,GAAQZ,EAAQY,EAAEC,OAAOC,UACnJ,cAACC,EAAA,EAAD,CACIC,QAAQ,YACRV,UAAWZ,EAAQuB,OACnBC,QAAU,YApCP,SAACrB,EAAME,EAAMP,EAAUC,EAAUS,GAChDH,EAAOoB,SAASpB,GAChBqB,QAAQC,IAAR,iBAAsBxB,EAAtB,mBAAqCE,EAArC,oBAAqDA,EAArD,mBAAoEA,IAIzD,KAAPF,GAAoB,KAAPE,GACbqB,QAAQE,KAAK,kDACbpB,GAAQ,IAIRqB,OAAOC,MAAMzB,IACbqB,QAAQE,KAAK,kDACbpB,GAAQ,KAKZV,EAASK,GACTJ,EAASM,IAgBqB0B,CAAW5B,EAAME,EAAMP,EAAUC,EAAUS,IAHjE,uBAQA,cAACwB,EAAA,EAAD,CAAUzB,KAAMA,EAAM0B,iBAAkB,IAAMC,aAAc,CAACC,SAAS,SAAUC,WAAW,QAASC,QAAU,WAAO7B,GAAQ,IAA7H,SACI,cAAC,IAAD,CAAU8B,UAAW,EAAGhB,QAAQ,SAASiB,SAAU,QAASF,QAAU,WAAO7B,GAAQ,IAArF,0CAShB,IAAMC,EAAmB+B,IAAOC,IAAV,KAehBxC,EAAYyC,YAAW,CACzBC,KAAO,GAGP9B,UAAY,CACR+B,QAAU,SACVC,MAAQ,QACR,UAAY,CACRA,MAAQ,SAEZ,sBAAuB,CACnBA,MAAO,SAEX,+BAAgC,CAC5BC,aAAc,QAElB,sCAAuC,CACnCC,kBAAmB,SAEvB,8BAA+B,CAC3BA,kBAAmB,UAG3BhC,MAAQ,CACJ8B,MAAQ,SAGZtB,OAAS,CACLyB,UAAY,SACZC,aAAe,Y,0wBC7FR,SAASC,EAAT,GAAwC,IAAf/C,EAAc,EAAdA,KAAME,EAAQ,EAARA,KAAQ,EAC1BH,oBAAS,GADiB,mBAC3CK,EAD2C,KACrCC,EADqC,OAElBN,mBAAS,IAFS,mBAE3CqC,EAF2C,KAEjCY,EAFiC,KAI5CC,EAASC,EAAWlD,EAAME,GAC1BL,EAAUC,IAEhB,OACI,eAACqD,EAAD,WACI,cAAC,kBAAD,CAAiBnD,KAAMiD,EAAvB,SACI,cAAC/B,EAAA,EAAD,CAAQC,QAAQ,YAAYV,UAAWZ,EAAQuB,OAAQC,QAAU,WAAO+B,EAAaH,EAAOI,OAAQhD,EAAS2C,IAA7G,uBAGJ,cAACnB,EAAA,EAAD,CAAUzB,KAAMA,EAAM0B,iBAAkB,IAAMC,aAAc,CAACC,SAAS,SAAUC,WAAW,QAASC,QAAU,WAAOoB,EAAcjD,IAAnI,SACI,cAAC,EAAD,CAAO+B,SAAUA,EAAUF,QAAU,WAAOoB,EAAcjD,IAA1D,SAEiB,SAAb+B,EACE,UACA,0BAKV,cAACmB,EAAD,UACI,cAACC,EAAD,UAASP,SAOzB,IAAMC,EAAa,SAAClD,EAAME,GAEtB,IADA,IAAIuD,EAAM,GACFC,EAAE,EAAGA,EAAExD,EAAMwD,IACjBD,GAAOzD,EAGX,OAAOyD,GAGLL,EAAe,SAACO,EAAKtD,EAAS2C,GAG7BW,EAAI,GACHpC,QAAQC,IAAI,UACZwB,EAAY,UAGZzB,QAAQE,KAAK,kEACbuB,EAAY,YAGhB3C,GAAQ,IAGNiD,EAAgB,SAACjD,GACnBA,GAAQ,IAGZ,SAASuD,EAAMC,GACX,OAAO,cAAC,IAAD,aAAU1B,UAAW,EAAGhB,QAAQ,UAAa0C,IAIxD,IAAM/D,EAAYyC,YAAW,CACzBnB,OAAS,CACLyB,UAAY,SACZC,aAAe,YAIjBK,EAAoBd,IAAOC,IAAV,KAejBiB,EAAalB,IAAOC,IAAV,KAcVkB,EAASnB,IAAOyB,EAAV,K,qoBCvGG,SAASC,IAAO,IAAD,EACFhE,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,OAEFF,mBAAS,GAFP,mBAEnBG,EAFmB,KAEbC,EAFa,KAI1B,OACI,eAAC6D,EAAD,CAASvD,UAAU,MAAnB,UACI,cAACwD,EAAD,UACI,cAACC,EAAD,wBAGJ,eAACC,EAAD,WACI,cAACzE,EAAD,CAAcC,SAAUM,EAASL,SAAUO,IAC3C,cAAC4C,EAAD,CAAe/C,KAAMA,EAAME,KAAMA,OAGrC,cAACkE,EAAD,wBAIA,cAAC,IAAD,CAAWC,eAAe,OAKtC,IAAML,EAAU3B,IAAOC,IAAV,KASP2B,EAAa5B,IAAOC,IAAV,KAIV6B,EAAc9B,IAAOC,IAAV,KAOX8B,EAAa/B,IAAOC,IAAV,KAGV4B,EAAQ7B,IAAOiC,GAAV,K,MClDXC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,mBAAGC,KAAK,uBAAuBjE,UAAU,iBAAzC,6BACA,cAACsD,EAAD,OAEFY,SAASC,eAAe,W","file":"static/js/main.a3ab12bb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from \"styled-components\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst passStates = (text, reps, passText, passReps, setOpen) => {\n    reps = parseInt(reps)\n    console.log(`text : ${text} ${typeof reps}/ reps : ${reps} ${typeof reps}`);\n    \n    // < validate inputs >\n        // 01. Empty input\n    if( text==='' || reps==='' ){\n        console.warn('[Validate Issue] Empty input : InputSection.js');\n        setOpen(true);\n        return;\n    }\n        // 02. Reps is NaN\n    if( Number.isNaN(reps) ){\n        console.warn('[Validate Issue] reps is NaN : InputSection.js');\n        setOpen(true);\n        return;\n    }\n\n    // < set State of Parent component >\n    passText(text); \n    passReps(reps);\n}\n\nexport default function InputSection({ passText, passReps }) {\n    const classes = useStyles();\n    const [text, setText] = useState('');\n    const [reps, setReps] = useState('');\n    const [open, setOpen] = useState(false);\n\n    return (\n        <InputSectionWrap>\n            <TextField id=\"text-input\" className={classes.textfield} inputProps={{className: classes.input}} label=\"Text\" onChange={ (e) => { setText(e.target.value) } } />\n            <TextField id=\"reps-input\" className={classes.textfield} inputProps={{className: classes.input}} label=\"Reps\" onChange={ (e) => { setReps(e.target.value) } } />\n            <Button \n                variant=\"contained\" \n                className={classes.button} \n                onClick={ () => { passStates(text, reps, passText, passReps, setOpen) } }\n            >\n                DO REPEAT\n            </Button>\n\n            <Snackbar open={open} autoHideDuration={3000} anchorOrigin={{vertical:'bottom', horizontal:'left'}} onClose={ () => {setOpen(false)} }>\n                <MuiAlert elevation={6} variant=\"filled\" severity={'error'} onClose={ () => {setOpen(false)} }>\n                    Please check your Input\n                </MuiAlert>\n            </Snackbar>\n\n        </InputSectionWrap>\n    );\n}\n\nconst InputSectionWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    \n    padding : 1rem;\n    margin : 1rem;\n    \n    background-color : rgba(255,255,255,0.1);\n    border-radius : 5px;\n\n    @media(max-width : 768px){\n        width : 95%;\n    }\n`;\n\nconst useStyles = makeStyles({\n    root : {\n        \n    },\n    textfield : {\n        padding : '0.5rem',\n        color : 'white',\n        '& label' : {\n            color : 'white',\n        },\n        '& label.Mui-focused': {\n            color: 'white',\n        },\n        \"& .MuiInput-underline:before\": {\n            borderBottom: \"none\"\n        },\n        \"& .MuiInput-underline:hover::before\": {\n            borderBottomColor: \"white\"\n        },\n        \"& .MuiInput-underline:after\": {\n            borderBottomColor: \"white\"\n          }\n    },\n    input : {\n        color : 'white',\n    },\n\n    button : {\n        marginTop : '0.5rem',\n        marginBottom : '0.5rem',\n    }\n});","import React, { useState } from 'react';\n\nimport styled from \"styled-components\";\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nexport default function OutputSection({ text, reps }) {\n    const [open, setOpen] = useState(false); \n    const [severity, setSeverity] = useState(''); // 'info' , 'warning'\n\n    const result = makeResult(text, reps);\n    const classes = useStyles();\n\n    return (\n        <OutputSectionWrap>\n            <CopyToClipboard text={result}>\n                <Button variant=\"contained\" className={classes.button} onClick={ () => {openCopyNoti(result.length, setOpen, setSeverity)} }>COPY IT</Button>\n            </CopyToClipboard>\n\n            <Snackbar open={open} autoHideDuration={3000} anchorOrigin={{vertical:'bottom', horizontal:'left'}} onClose={ () => {closeCopyNoti(setOpen)} }>\n                <Alert severity={severity} onClose={ () => {closeCopyNoti(setOpen)} }>\n                {\n                    severity === 'info'\n                    ? 'Copied!' \n                    : 'There is no content'\n                }\n                </Alert>\n            </Snackbar>\n\n            <ResultWrap>\n                <Result>{result}</Result>\n            </ResultWrap>            \n            \n        </OutputSectionWrap>\n    );\n}\n\nconst makeResult = (text, reps) => {\n    let str = ''\n    for(let i=0; i<reps; i++){\n        str += text;\n    }\n\n    return str;\n} \n\nconst openCopyNoti = (len, setOpen, setSeverity) => {\n\n    //validation\n    if(len>0){\n        console.log('copied');\n        setSeverity('info')\n    }\n    else {\n        console.warn('[Validate Issue] The result is Empty String : OutputSection.js');\n        setSeverity('warning')\n    }\n\n    setOpen(true);\n}\n\nconst closeCopyNoti = (setOpen) => {\n    setOpen(false);\n}\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nconst useStyles = makeStyles({\n    button : {\n        marginTop : '0.5rem',\n        marginBottom : '0.5rem',\n    }\n});\n\nconst OutputSectionWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n\n    padding : 1rem;\n    margin : 1rem;\n\n    background-color : rgba(255,255,255,0.1);\n    border-radius : 5px;\n\n    @media(max-width : 768px){\n        width : 95%;\n    }\n`;\n\nconst ResultWrap = styled.div`\n    display : inherit;\n    justify-content : center;\n\n    background-color : white;\n    border-radius : 5px;\n\n    margin-top : 0.5rem;\n    margin-bottom : 0.5rem;\n\n    padding-left : 0.5rem;\n    padding-right : 0.5rem;\n`;\n\nconst Result = styled.p`\n    color : black;\n    \n    word-break: break-all;\n    overflow-wrap: break-word; \n`;","import React, { useState } from 'react';\n\nimport styled from \"styled-components\";\nimport SnowStorm from 'react-snowstorm';\n\nimport InputSection from \"./components/InputSection\";\nimport OutputSection from \"./components/OutputSection\";\n\nexport default function App() {\n    const [text, setText] = useState('');\n    const [reps, setReps] = useState(0);\n\n    return (\n        <AppWrap className=\"App\">\n            <HeaderWrap>\n                <Title>RepeJin</Title>\n            </HeaderWrap>\n\n            <ContentWrap>\n                <InputSection passText={setText} passReps={setReps} />\n                <OutputSection text={text} reps={reps} />\n            </ContentWrap>\n\n            <FooterWrap>\n                Wonjin Yi\n            </FooterWrap>\n\n            <SnowStorm excludeMobile={false} />\n        </AppWrap>\n    );\n}\n\nconst AppWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n\n    color : white;\n`;\n\nconst HeaderWrap = styled.div`\n    display : inherit;\n`;\n\nconst ContentWrap = styled.div`\n    display : inherit;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n`;\n\nconst FooterWrap = styled.div`\n`;\n\nconst Title = styled.h1`\n    font-size : 50px;\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <a href=\"https://lab.wonj.in/\" className=\"wonjinlab-link\">Go to wonjinLab</a>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}