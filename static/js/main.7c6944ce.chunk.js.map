{"version":3,"sources":["components/UserSetting.js","components/InputSection.js","components/OutputSection.js","App.js","index.js"],"names":["UserSetting","passUserSettings","useState","forDiscord","snowstorm","settings","setSettings","useEffect","console","log","handleChange","event","target","name","checked","UserSettingWrap","className","FormGroup","FormControlLabel","control","Switch","onChange","color","label","labelPlacement","styled","div","InputSection","passText","passReps","classes","useStyles","text","setText","reps","setReps","open","setOpen","InputSectionWrap","TextField","id","textfield","inputProps","input","e","value","Button","variant","button","onClick","parseInt","warn","Number","isNaN","passStates","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","elevation","severity","makeStyles","root","padding","borderBottom","borderBottomColor","marginTop","marginBottom","OutputSection","setSeverity","result","makeResult","OutputSectionWrap","openCopyNoti","length","closeCopyNoti","ResultWrap","Result","NumLengthLimit","str","i","slice","len","Alert","props","p","App","AppWrap","HeaderWrap","Title","ContentWrap","FooterWrap","excludeMobile","h1","ReactDOM","render","StrictMode","href","document","getElementById"],"mappings":"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","file":"static/js/main.7c6944ce.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport styled from \"styled-components\";\n\n//import { makeStyles } from '@material-ui/core/styles';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nexport default function UserSetting({passUserSettings}) {\n    //const classes = useStyles();\n\n    const [settings, setSettings] = useState({\n        forDiscord: true,\n        snowstorm : true,\n    });\n\n    useEffect( () => {\n        console.log(settings);\n        passUserSettings(settings);\n    });\n\n    const handleChange = (event) => {\n        setSettings({ ...settings, [event.target.name]: event.target.checked });\n    }\n\n    return (\n        <UserSettingWrap className=\"UserSetting\">\n            <FormGroup>\n                <FormControlLabel\n                    control={ <Switch checked={settings.forDiscord} onChange={handleChange} name=\"forDiscord\" color=\"primary\" /> }\n                    label=\"For Discord\" labelPlacement=\"start\" \n                />\n                <FormControlLabel\n                    control={ <Switch checked={settings.snowstorm} onChange={handleChange} name=\"snowstorm\" color=\"primary\" /> }\n                    label=\"Snow Storm\" labelPlacement=\"start\"\n                />\n            </FormGroup>\n        </UserSettingWrap>\n    );\n}\n\nconst UserSettingWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n\n\n    \n   \n    border-radius : 5px;\n\n    color : white;\n\n    @media(max-width : 768px){\n        width : 90%;\n        max-width : 90%;\n    }\n`;\n//  background-color : rgba(255,255,255,0.1);","import React, { useState } from 'react';\nimport styled from \"styled-components\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst passStates = (text, reps, passText, passReps, setOpen) => {\n    reps = parseInt(reps)\n    console.log(`text : ${text} ${typeof reps}/ reps : ${reps} ${typeof reps}`);\n    \n    // < validate inputs >\n        // 01. Empty input\n    if( text==='' || reps==='' ){\n        console.warn('[Validate Issue] Empty input : InputSection.js');\n        setOpen(true);\n        return;\n    }\n        // 02. Reps is NaN\n    if( Number.isNaN(reps) ){\n        console.warn('[Validate Issue] reps is NaN : InputSection.js');\n        setOpen(true);\n        return;\n    }\n\n    // < set State of Parent component >\n    passText(text); \n    passReps(reps);\n}\n\nexport default function InputSection({ passText, passReps }) {\n    const classes = useStyles();\n    const [text, setText] = useState('');\n    const [reps, setReps] = useState('');\n    const [open, setOpen] = useState(false);\n\n    return (\n        <InputSectionWrap>\n            <TextField id=\"text-input\" className={classes.textfield} inputProps={{className: classes.input}} label=\"Text\" onChange={ (e) => { setText(e.target.value) } } />\n            <TextField id=\"reps-input\" className={classes.textfield} inputProps={{className: classes.input}} label=\"Reps\" onChange={ (e) => { setReps(e.target.value) } } />\n            <Button \n                variant=\"contained\" \n                className={classes.button} \n                onClick={ () => { passStates(text, reps, passText, passReps, setOpen) } }\n            >\n                DO REPEAT\n            </Button>\n\n            <Snackbar open={open} autoHideDuration={3000} anchorOrigin={{vertical:'bottom', horizontal:'left'}} onClose={ () => {setOpen(false)} }>\n                <MuiAlert elevation={6} variant=\"filled\" severity={'error'} onClose={ () => {setOpen(false)} }>\n                    Please check your Input\n                </MuiAlert>\n            </Snackbar>\n\n        </InputSectionWrap>\n    );\n}\n\nconst InputSectionWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    \n    padding : 1rem;\n    margin : 1rem;\n    \n    background-color : rgba(255,255,255,0.1);\n    border-radius : 5px;\n\n    @media(max-width : 768px){\n        width : 95%;\n        max-width : 95%;\n    }\n`;\n\nconst useStyles = makeStyles({\n    root : {\n        \n    },\n    textfield : {\n        padding : '0.5rem',\n        color : 'white',\n        '& label' : {\n            color : 'white',\n        },\n        '& label.Mui-focused': {\n            color: 'white',\n        },\n        \"& .MuiInput-underline:before\": {\n            borderBottom: \"none\"\n        },\n        \"& .MuiInput-underline:hover::before\": {\n            borderBottomColor: \"white\"\n        },\n        \"& .MuiInput-underline:after\": {\n            borderBottomColor: \"white\"\n          }\n    },\n    input : {\n        color : 'white',\n    },\n\n    button : {\n        marginTop : '0.5rem',\n        marginBottom : '0.5rem',\n    }\n});","import React, { useState } from 'react';\n\nimport styled from \"styled-components\";\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nexport default function OutputSection({ text, reps, forDiscord }) {\n    const [open, setOpen] = useState(false); \n    const [severity, setSeverity] = useState(''); // 'info' , 'warning'\n    const NumLengthLimit = 2000;\n\n    const result = makeResult(text, reps, forDiscord, NumLengthLimit);\n    const classes = useStyles();\n\n    return (\n        <OutputSectionWrap>\n            <CopyToClipboard text={result}>\n                <Button variant=\"contained\" className={classes.button} onClick={ () => {openCopyNoti(result.length, setOpen, setSeverity)} }>COPY IT</Button>\n            </CopyToClipboard>\n\n            <Snackbar open={open} autoHideDuration={3000} anchorOrigin={{vertical:'bottom', horizontal:'left'}} onClose={ () => {closeCopyNoti(setOpen)} }>\n                <Alert severity={severity} onClose={ () => {closeCopyNoti(setOpen)} }>\n                {\n                    severity === 'info'\n                    ? 'Copied!' \n                    : 'There is no content'\n                }\n                </Alert>\n            </Snackbar>\n\n            <ResultWrap>\n                <Result>{result}</Result>\n            </ResultWrap>            \n            \n        </OutputSectionWrap>\n    );\n}\n\nconst makeResult = (text, reps, forDiscord, NumLengthLimit) => {\n    let str = ''\n\n    for(let i=0; i<reps; i++){\n        str += text;\n        \n        if(forDiscord && (str.length > NumLengthLimit)){\n            str = str.slice(0,2000);\n            break;\n        }    \n    }\n\n    \n    return str;\n} \n\nconst openCopyNoti = (len, setOpen, setSeverity) => {\n\n    //validation\n    if(len>0){\n        console.log('copied');\n        setSeverity('info')\n    }\n    else {\n        console.warn('[Validate Issue] The result is Empty String : OutputSection.js');\n        setSeverity('warning')\n    }\n\n    setOpen(true);\n}\n\nconst closeCopyNoti = (setOpen) => {\n    setOpen(false);\n}\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nconst useStyles = makeStyles({\n    button : {\n        marginTop : '0.5rem',\n        marginBottom : '0.5rem',\n    }\n});\n\nconst OutputSectionWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n\n    padding : 1rem;\n    margin : 1rem;\n\n    background-color : rgba(255,255,255,0.1);\n    border-radius : 5px;\n\n    @media(max-width : 768px){\n        max-width : 95%;\n        width : 95%;\n    }\n`;\n\nconst ResultWrap = styled.div`\n    display : inherit;\n    justify-content : center;\n\n    background-color : white;\n    border-radius : 5px;\n\n    margin-top : 0.5rem;\n    margin-bottom : 0.5rem;\n\n    padding-left : 0.5rem;\n    padding-right : 0.5rem;\n`;\n\nconst Result = styled.p`\n    color : black;\n    \n    word-break: break-all;\n    overflow-wrap: break-word; \n`;","import React, { useState } from \"react\";\n\nimport styled from \"styled-components\";\nimport SnowStorm from \"react-snowstorm\";\n\nimport UserSetting from \"./components/UserSetting\";\nimport InputSection from \"./components/InputSection\";\nimport OutputSection from \"./components/OutputSection\";\n\nexport default function App() {\n    const [text, setText] = useState('');\n    const [reps, setReps] = useState(0);\n    const [settings, setSettings] = useState({\n        forDiscord: true,\n        snowstorm : true,\n    });\n\n    return (\n        <AppWrap className=\"App\">\n            <HeaderWrap>\n                <Title>RepeJin</Title>\n            </HeaderWrap>\n\n            <UserSetting passUserSettings={setSettings} />\n\n            <ContentWrap>\n                <InputSection passText={setText} passReps={setReps} />\n                <OutputSection text={text} reps={reps} forDiscord={settings.forDiscord} />\n            </ContentWrap>\n\n            <FooterWrap>\n                Wonjin Yi\n            </FooterWrap>\n            \n            {\n                settings.snowstorm\n                ? <SnowStorm excludeMobile={false} />\n                : ''\n            }\n            \n        </AppWrap>\n    );\n}\n\nconst AppWrap = styled.div`\n    display : flex;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n\n    color : white;\n    \n`;\n\nconst HeaderWrap = styled.div`\n    display : inherit;\n`;\n\nconst ContentWrap = styled.div`\n    display : inherit;\n    flex-direction : column;\n    justify-content : center;\n    align-items : center;\n    \n    @media(max-width : 768px){\n        max-width : 90%;\n        width : 90%;\n    }\n`;\n\nconst FooterWrap = styled.div`\n`;\n\nconst Title = styled.h1`\n    font-size : 50px;\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <a href=\"https://lab.wonj.in/\" className=\"wonjinlab-link\">Go to wonjinLab</a>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}